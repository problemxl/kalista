[project]
readme = "README.md"

[tool.poetry]
name = "kalista"
version = "0.1.5"
description = ""
authors = ["Mark Franciscus <mark.franciscus@hotmail.com>"]

[tool.poetry.dependencies]
python = "^3.10, <3.12"
loguru = "*"
decorators = "*"
pydantic = "*"
pandas = "^2.0.2"
aiohttp = "3.9.0"
pendulum = "^2.1.2"

[tool.poetry.dev-dependencies]
pytest = "*"
pylint = "*"
flake8 = "*"
black = "*"
icecream = "*"
rope = "*"
isort = "*"


[tool.poetry.group.dev.dependencies]
pytest-recording = "*"
pytest-cov = "*"
pytest-asyncio = "*"
vcrpy= "*"
pdoc3 = "^0.10.0"
pdoc = "^14.1.0"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pylint]
max-line-length = 140
disable = ["C0114", "R0902"]

[pytest]
log_cli = false
vcr_record_mode = "once"
vcr_cassette_library_dir = "tests/fixtures/vcr_cassettes"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
